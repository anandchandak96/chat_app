continue
params
continue
n
continue
n
continue
user
n
continue
params[:profile_image][:filename]
params[:profile_image][:file_name]
params[:first_name]
params[:profile_image]
params
continue
params
continue
I18n.t('created')
I18n.t
params
continue
I18n.locale
I18n.t
c
continue
last_name: params[:last_name]
user
 user.update(first_name: params[:first_name])
params
user
n
continue
params
continue
last_name: params[:last_name]
n
User.find(params[:id])
continue
@current_user
current_user
continue
User.create(first_name: params[:first_name],last_name: params[:last_name], email: params[:email])
continue
decoded_token.first['user_id']
decoded_token.first[:user_id]
User.find(decoded_token.first[:user_id])
User.find(decoded_token.first['user_id'])
User.find(decoded_token['user_id'])
n
JWT.decode(token, ENV['JWT_SECRET_KEY'] , true, algorithm: 'HS256')
n
request.headers['authorization']&.split(' ')&.last
continue
JWT.decode(token)
token = token.gsub(/^\"|\"?$/, '')
token.gsub(/^\"|\"?$/, '')
token = request.headers['authorization']&.split(' ')&.last
request.headers['authorization']&.split(' ')&.last
request.headers['authorization']
request.headers
request.headers['Authorization']
request.headers['Authorization']&.split(' ')&.last
request
continue
request
request.headers['Authorization']&.split(' ')&.last
continue
user.valid_password?(params[:password])
n
User.find_for_authentication(email: params[:email])
params
continue
JWT.encode(payload, secret_key, algorithm)
algorithm
secret_key
payload
n
continue
JWT.encode(user_id: user.id,algorithm)
JWT.encode(user_id:user.id,algorithm)
algorithm = 'HS256'
JWT.encode(user_id:user.id,algorithm = 'HS256')
user.jwt_encode(user_id: user.id)
@anand
@current_user
current_user
JWT.encode(user_id:user.id)
user
